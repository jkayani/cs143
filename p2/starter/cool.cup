/*
 *  cool.cup
 *              Parser definition for the COOL language.
 *
 */

import java_cup.runtime.*;

/* Stuff enclosed in {: :} is copied verbatim to the class containing
all parser actions.  All the extra variables/functions you want to use
in the semantic actions should go here.  Don't remove or modify anything
that was there initially.  */

action code {: 

    int curr_lineno() {
	return ((CoolTokenLexer)parser.getScanner()).curr_lineno();
    }

    AbstractSymbol curr_filename() {
	return ((CoolTokenLexer)parser.getScanner()).curr_filename();
    }
:} 

/************************************************************************/
/*                DONT CHANGE ANYTHING IN THIS SECTION                  */

parser code {:
    int omerrs = 0;

    public void syntax_error(Symbol cur_token) {
			int lineno = action_obj.curr_lineno();
			String filename = action_obj.curr_filename().getString();
			System.err.print("\"" + filename + "\", line " + lineno + 
				": parse error at or near ");
			Utilities.printToken(cur_token);
			omerrs++;
			if (omerrs>50) {
				System.err.println("More than 50 errors");
				System.exit(1);
			}
		}

    public void unrecovered_syntax_error(Symbol cur_token) {
    }
:}

/* Declare the terminals; a few have types for associated lexemes.  The
token ERROR is never used in the parser; thus, it is a parse error when
the lexer returns it.  */

terminal CLASS, ELSE, FI, IF, IN, INHERITS, LET, LET_STMT, LOOP, POOL, THEN, WHILE;
terminal CASE, ESAC, OF, DARROW, NEW, ISVOID;
terminal ASSIGN, NOT, LE, ERROR;
terminal PLUS, DIV, MINUS, MULT, EQ, LT, DOT, NEG, COMMA, SEMI, COLON;
terminal LPAREN, RPAREN, AT, LBRACE, RBRACE;
terminal AbstractSymbol STR_CONST, INT_CONST;
terminal Boolean BOOL_CONST;
terminal AbstractSymbol TYPEID, OBJECTID;

/*  DON'T CHANGE ANYTHING ABOVE THIS LINE, OR YOUR PARSER WONT WORK       */
/**************************************************************************/

   /* Complete the nonterminal list below, giving a type for the semantic
      value of each non terminal. (See the CUP documentation for details. */

nonterminal programc program;
nonterminal Classes class_list;
nonterminal class_c class;
nonterminal Features feature_list;
nonterminal attr attribute;
nonterminal Expression expr;
nonterminal Case case_;
nonterminal Cases case_list;

/* Precedence declarations go here. */
precedence right ASSIGN;
precedence left NOT;
precedence nonassoc LE, LT, EQ;
precedence left PLUS, MINUS;
precedence left MULT, DIV;
precedence left ISVOID;
precedence left NEG;
precedence left AT;
precedence left DOT;

program	
	::= class_list:cl
	    {: RESULT = new programc(curr_lineno(), cl); :}
        ;

class_list
	/* single class */
	::= class:c
	    {: RESULT = (new Classes(curr_lineno())).appendElement(c); :}
	/* several classes */
	| class_list:cl class:c
	    {: RESULT = cl.appendElement(c); :}
	;

/* If no parent is specified, the class inherits from the Object class */
class
	::= CLASS TYPEID:n LBRACE feature_list:f RBRACE SEMI
	    {: RESULT = new class_c(curr_lineno(), n, 
		                   AbstractTable.idtable.addString("Object"), 
				   f, curr_filename()); :}
	| CLASS TYPEID:n INHERITS TYPEID:p LBRACE feature_list:f RBRACE SEMI
	    {: RESULT = new class_c(curr_lineno(), n, p, f, curr_filename()); :}
	;

/* Feature list may be empty, but no empty features in list. */
// dummy_feature_list
// 	::= /* empty */
// 	    {: RESULT = new Features(curr_lineno()); :}
// 	;

feature_list 
	::= {: RESULT = new Features(curr_lineno()); :}
	| attribute:a {:
		RESULT = new Features(curr_lineno()).appendElement(a);
	:}
	| feature_list:fl attribute:a {:
		RESULT = fl.appendElement(a);
	:}
	;

attribute
	::= OBJECTID:o COLON TYPEID:t SEMI {: 
		RESULT = new attr(curr_lineno(), o, t, new no_expr(curr_lineno()));
	:}
	| OBJECTID:o COLON TYPEID:t ASSIGN expr:e SEMI {: 
		RESULT = new attr(curr_lineno(), o, t, e);
	:}
	;

case_
	::= OBJECTID:o COLON TYPEID:t DARROW expr:e {:
		RESULT = new branch(curr_lineno(), o, t, e);
	:}
	;

case_list
	::= case_:c_ {:
		RESULT = new Cases(curr_lineno()).appendElement(c_);
	:}
	| case_list:c case_:c_ {:
		c.appendElement(c_);
	:}
	;

expr
	::= OBJECTID:i {:
		RESULT = new object(curr_lineno(), i);
	:}
	| CASE expr:i1 OF case_list:c ESAC {:
		RESULT = new typcase(curr_lineno(), i1, c);
	:}
	| INT_CONST:i {:
		RESULT = new int_const(curr_lineno(), i);
	:}
	| STR_CONST:i {:
		RESULT = new string_const(curr_lineno(), i);
	:}
	| BOOL_CONST:i {:
		RESULT = new bool_const(curr_lineno(), i);
	:}
	| NEW TYPEID:t {:
		RESULT = new new_(curr_lineno(), t);
	:}
	| ISVOID expr:i1 {:
		RESULT = new isvoid(curr_lineno(), i1);
	:}
	| expr:i1 PLUS expr:i2 {:
		RESULT = new plus(curr_lineno(), i1, i2);
	:}
	| expr:i1 MINUS expr:i2 {:
		RESULT = new sub(curr_lineno(), i1, i2);
	:}
	| expr:i1 MULT expr:i2 {:
		RESULT = new mul(curr_lineno(), i1, i2);
	:}
	| expr:i1 DIV expr:i2 {:
		RESULT = new divide(curr_lineno(), i1, i2);
	:}
	| NEG expr:i1 {:
		RESULT = new neg(curr_lineno(), i1);
	:}
	| expr:i1 LT expr:i2 {:
		RESULT = new lt(curr_lineno(), i1, i2);
	:}
	| expr:i1 LE expr:i2 {:
		RESULT = new leq(curr_lineno(), i1, i2);
	:}
	| expr:i1 EQ expr:i2 {:
		RESULT = new eq(curr_lineno(), i1, i2);
	:}
	| NOT expr:i1 {:
		RESULT = new comp(curr_lineno(), i1);
	:}
	| LPAREN expr:i1 RPAREN {:
		RESULT = i1;
	:}
		%prec DOT
	;
