
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Dec 28 01:51:59 UTC 2020
//----------------------------------------------------

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Dec 28 01:51:59 UTC 2020
  */
public class CoolParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public CoolParser() {super();}

  /** Constructor which sets the default scanner. */
  public CoolParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CoolParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\037\000\002\002\003\000\002\002\004\000\002\003" +
    "\003\000\002\003\004\000\002\004\010\000\002\004\012" +
    "\000\002\005\002\000\002\005\003\000\002\005\004\000" +
    "\002\006\006\000\002\006\010\000\002\010\007\000\002" +
    "\011\003\000\002\011\004\000\002\007\003\000\002\007" +
    "\007\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\004\000\002\007\004\000\002\007\005\000" +
    "\002\007\005\000\002\007\005\000\002\007\005\000\002" +
    "\007\004\000\002\007\005\000\002\007\005\000\002\007" +
    "\005\000\002\007\004\000\002\007\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\104\000\004\004\007\001\002\000\006\002\001\004" +
    "\007\001\002\000\004\002\105\001\002\000\006\002\uffff" +
    "\004\uffff\001\002\000\004\055\010\001\002\000\006\011" +
    "\012\050\011\001\002\000\006\051\ufffb\056\015\001\002" +
    "\000\004\055\013\001\002\000\004\050\014\001\002\000" +
    "\006\051\ufffb\056\015\001\002\000\004\044\023\001\002" +
    "\000\006\051\021\056\015\001\002\000\006\051\ufffa\056" +
    "\ufffa\001\002\000\006\051\ufff9\056\ufff9\001\002\000\004" +
    "\043\022\001\002\000\006\002\ufffc\004\ufffc\001\002\000" +
    "\004\055\024\001\002\000\006\026\026\043\025\001\002" +
    "\000\006\051\ufff8\056\ufff8\001\002\000\026\020\035\024" +
    "\027\025\033\027\036\041\040\045\041\052\031\053\030" +
    "\054\032\056\034\001\002\000\004\055\101\001\002\000" +
    "\032\021\ufff1\022\ufff1\030\ufff1\032\ufff1\033\ufff1\034\ufff1" +
    "\035\ufff1\036\ufff1\037\ufff1\043\ufff1\046\ufff1\056\ufff1\001" +
    "\002\000\032\021\ufff0\022\ufff0\030\ufff0\032\ufff0\033\ufff0" +
    "\034\ufff0\035\ufff0\036\ufff0\037\ufff0\043\ufff0\046\ufff0\056" +
    "\ufff0\001\002\000\032\021\uffef\022\uffef\030\uffef\032\uffef" +
    "\033\uffef\034\uffef\035\uffef\036\uffef\037\uffef\043\uffef\046" +
    "\uffef\056\uffef\001\002\000\026\020\035\024\027\025\033" +
    "\027\036\041\040\045\041\052\031\053\030\054\032\056" +
    "\034\001\002\000\032\021\ufff3\022\ufff3\030\ufff3\032\ufff3" +
    "\033\ufff3\034\ufff3\035\ufff3\036\ufff3\037\ufff3\043\ufff3\046" +
    "\ufff3\056\ufff3\001\002\000\026\020\035\024\027\025\033" +
    "\027\036\041\040\045\041\052\031\053\030\054\032\056" +
    "\034\001\002\000\026\020\035\024\027\025\033\027\036" +
    "\041\040\045\041\052\031\053\030\054\032\056\034\001" +
    "\002\000\022\030\050\032\047\033\052\034\051\035\046" +
    "\036\043\037\044\043\063\001\002\000\026\020\035\024" +
    "\027\025\033\027\036\041\040\045\041\052\031\053\030" +
    "\054\032\056\034\001\002\000\026\020\035\024\027\025" +
    "\033\027\036\041\040\045\041\052\031\053\030\054\032" +
    "\056\034\001\002\000\022\030\050\032\047\033\052\034" +
    "\051\035\046\036\043\037\044\046\045\001\002\000\026" +
    "\020\035\024\027\025\033\027\036\041\040\045\041\052" +
    "\031\053\030\054\032\056\034\001\002\000\026\020\035" +
    "\024\027\025\033\027\036\041\040\045\041\052\031\053" +
    "\030\054\032\056\034\001\002\000\032\021\uffe3\022\uffe3" +
    "\030\uffe3\032\uffe3\033\uffe3\034\uffe3\035\uffe3\036\uffe3\037" +
    "\uffe3\043\uffe3\046\uffe3\056\uffe3\001\002\000\026\020\035" +
    "\024\027\025\033\027\036\041\040\045\041\052\031\053" +
    "\030\054\032\056\034\001\002\000\026\020\035\024\027" +
    "\025\033\027\036\041\040\045\041\052\031\053\030\054" +
    "\032\056\034\001\002\000\026\020\035\024\027\025\033" +
    "\027\036\041\040\045\041\052\031\053\030\054\032\056" +
    "\034\001\002\000\026\020\035\024\027\025\033\027\036" +
    "\041\040\045\041\052\031\053\030\054\032\056\034\001" +
    "\002\000\026\020\035\024\027\025\033\027\036\041\040" +
    "\045\041\052\031\053\030\054\032\056\034\001\002\000" +
    "\032\021\uffe9\022\uffe9\030\uffe9\032\uffe9\033\uffe9\034\uffe9" +
    "\035\uffe9\036\uffe9\037\uffe9\043\uffe9\046\uffe9\056\uffe9\001" +
    "\002\000\032\021\uffeb\022\uffeb\030\uffeb\032\uffeb\033\052" +
    "\034\uffeb\035\046\036\uffeb\037\uffeb\043\uffeb\046\uffeb\056" +
    "\uffeb\001\002\000\024\021\uffe6\022\uffe6\032\047\033\052" +
    "\034\051\035\046\043\uffe6\046\uffe6\056\uffe6\001\002\000" +
    "\032\021\uffec\022\uffec\030\uffec\032\uffec\033\052\034\uffec" +
    "\035\046\036\uffec\037\uffec\043\uffec\046\uffec\056\uffec\001" +
    "\002\000\032\021\uffea\022\uffea\030\uffea\032\uffea\033\uffea" +
    "\034\uffea\035\uffea\036\uffea\037\uffea\043\uffea\046\uffea\056" +
    "\uffea\001\002\000\024\021\uffe7\022\uffe7\032\047\033\052" +
    "\034\051\035\046\043\uffe7\046\uffe7\056\uffe7\001\002\000" +
    "\024\021\uffe5\022\uffe5\032\047\033\052\034\051\035\046" +
    "\043\uffe5\046\uffe5\056\uffe5\001\002\000\032\021\uffe8\022" +
    "\uffe8\030\uffe8\032\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8" +
    "\037\uffe8\043\uffe8\046\uffe8\056\uffe8\001\002\000\006\051" +
    "\ufff7\056\ufff7\001\002\000\032\021\uffe4\022\uffe4\030\050" +
    "\032\047\033\052\034\051\035\046\036\043\037\044\043" +
    "\uffe4\046\uffe4\056\uffe4\001\002\000\022\022\066\030\050" +
    "\032\047\033\052\034\051\035\046\036\043\037\044\001" +
    "\002\000\004\056\070\001\002\000\006\021\ufff5\056\ufff5" +
    "\001\002\000\004\044\074\001\002\000\006\021\073\056" +
    "\070\001\002\000\006\021\ufff4\056\ufff4\001\002\000\032" +
    "\021\ufff2\022\ufff2\030\ufff2\032\ufff2\033\ufff2\034\ufff2\035" +
    "\ufff2\036\ufff2\037\ufff2\043\ufff2\046\ufff2\056\ufff2\001\002" +
    "\000\004\055\075\001\002\000\004\023\076\001\002\000" +
    "\026\020\035\024\027\025\033\027\036\041\040\045\041" +
    "\052\031\053\030\054\032\056\034\001\002\000\024\021" +
    "\ufff6\030\050\032\047\033\052\034\051\035\046\036\043" +
    "\037\044\056\ufff6\001\002\000\032\021\uffed\022\uffed\030" +
    "\uffed\032\uffed\033\uffed\034\uffed\035\uffed\036\uffed\037\uffed" +
    "\043\uffed\046\uffed\056\uffed\001\002\000\032\021\uffee\022" +
    "\uffee\030\uffee\032\uffee\033\uffee\034\uffee\035\uffee\036\uffee" +
    "\037\uffee\043\uffee\046\uffee\056\uffee\001\002\000\006\051" +
    "\103\056\015\001\002\000\004\043\104\001\002\000\006" +
    "\002\ufffd\004\ufffd\001\002\000\004\002\000\001\002\000" +
    "\006\002\ufffe\004\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\104\000\010\002\004\003\003\004\005\001\001\000" +
    "\004\004\105\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\101\006" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\015\006\016\001\001\000\002\001\001\000\004\006" +
    "\017\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\077\001\001\000\002\001\001\000\004" +
    "\007\064\001\001\000\004\007\063\001\001\000\002\001" +
    "\001\000\004\007\061\001\001\000\004\007\041\001\001" +
    "\000\002\001\001\000\004\007\060\001\001\000\004\007" +
    "\057\001\001\000\002\001\001\000\004\007\056\001\001" +
    "\000\004\007\055\001\001\000\004\007\054\001\001\000" +
    "\004\007\053\001\001\000\004\007\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\010\066\011\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\071\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\076\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\017\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CoolParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CoolParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CoolParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    int omerrs = 0;

    public void syntax_error(Symbol cur_token) {
        int lineno = action_obj.curr_lineno();
	String filename = action_obj.curr_filename().getString();
        System.err.print("\"" + filename + "\", line " + lineno + 
		         ": parse error at or near ");
        Utilities.printToken(cur_token);
	omerrs++;
	if (omerrs>50) {
	   System.err.println("More than 50 errors");
	   System.exit(1);
	}
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$CoolParser$actions {

 

    int curr_lineno() {
	return ((CoolTokenLexer)parser.getScanner()).curr_lineno();
    }

    AbstractSymbol curr_filename() {
	return ((CoolTokenLexer)parser.getScanner()).curr_filename();
    }

  private final CoolParser parser;

  /** Constructor */
  CUP$CoolParser$actions(CoolParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$CoolParser$do_action(
    int                        CUP$CoolParser$act_num,
    java_cup.runtime.lr_parser CUP$CoolParser$parser,
    java.util.Stack            CUP$CoolParser$stack,
    int                        CUP$CoolParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CoolParser$result;

      /* select the action based on the action number */
      switch (CUP$CoolParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr ::= LPAREN expr RPAREN 
            {
              Expression RESULT =null;
		Expression i1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		
		RESULT = i1;
	
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= NOT expr 
            {
              Expression RESULT =null;
		Expression i1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		
		RESULT = new comp(curr_lineno(), i1);
	
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= expr EQ expr 
            {
              Expression RESULT =null;
		Expression i1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression i2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		
		RESULT = new eq(curr_lineno(), i1, i2);
	
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= expr LE expr 
            {
              Expression RESULT =null;
		Expression i1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression i2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		
		RESULT = new leq(curr_lineno(), i1, i2);
	
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= expr LT expr 
            {
              Expression RESULT =null;
		Expression i1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression i2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		
		RESULT = new lt(curr_lineno(), i1, i2);
	
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= NEG expr 
            {
              Expression RESULT =null;
		Expression i1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		
		RESULT = new neg(curr_lineno(), i1);
	
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= expr DIV expr 
            {
              Expression RESULT =null;
		Expression i1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression i2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		
		RESULT = new divide(curr_lineno(), i1, i2);
	
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr ::= expr MULT expr 
            {
              Expression RESULT =null;
		Expression i1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression i2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		
		RESULT = new mul(curr_lineno(), i1, i2);
	
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr ::= expr MINUS expr 
            {
              Expression RESULT =null;
		Expression i1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression i2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		
		RESULT = new sub(curr_lineno(), i1, i2);
	
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr ::= expr PLUS expr 
            {
              Expression RESULT =null;
		Expression i1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression i2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		
		RESULT = new plus(curr_lineno(), i1, i2);
	
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expr ::= ISVOID expr 
            {
              Expression RESULT =null;
		Expression i1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		
		RESULT = new isvoid(curr_lineno(), i1);
	
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expr ::= NEW TYPEID 
            {
              Expression RESULT =null;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		
		RESULT = new new_(curr_lineno(), t);
	
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expr ::= BOOL_CONST 
            {
              Expression RESULT =null;
		Boolean i = (Boolean)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		
		RESULT = new bool_const(curr_lineno(), i);
	
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expr ::= STR_CONST 
            {
              Expression RESULT =null;
		AbstractSymbol i = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		
		RESULT = new string_const(curr_lineno(), i);
	
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expr ::= INT_CONST 
            {
              Expression RESULT =null;
		AbstractSymbol i = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		
		RESULT = new int_const(curr_lineno(), i);
	
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expr ::= CASE expr OF case_list ESAC 
            {
              Expression RESULT =null;
		Expression i1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		Cases c = (Cases)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		
		RESULT = new typcase(curr_lineno(), i1, c);
	
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expr ::= OBJECTID 
            {
              Expression RESULT =null;
		AbstractSymbol i = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		
		RESULT = new object(curr_lineno(), i);
	
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // case_list ::= case_list case_ 
            {
              Cases RESULT =null;
		Cases c = (Cases)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		Case c_ = (Case)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		
		c.appendElement(c_);
	
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("case_list",7, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // case_list ::= case_ 
            {
              Cases RESULT =null;
		Case c_ = (Case)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		
		RESULT = new Cases(curr_lineno()).appendElement(c_);
	
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("case_list",7, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // case_ ::= OBJECTID COLON TYPEID DARROW expr 
            {
              Case RESULT =null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		
		RESULT = new branch(curr_lineno(), o, t, e);
	
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("case_",6, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // attribute ::= OBJECTID COLON TYPEID ASSIGN expr SEMI 
            {
              attr RESULT =null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).value;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 
		RESULT = new attr(curr_lineno(), o, t, e);
	
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("attribute",4, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // attribute ::= OBJECTID COLON TYPEID SEMI 
            {
              attr RESULT =null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 
		RESULT = new attr(curr_lineno(), o, t, new no_expr(curr_lineno()));
	
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("attribute",4, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // feature_list ::= feature_list attribute 
            {
              Features RESULT =null;
		Features fl = (Features)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		attr a = (attr)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		
		RESULT = fl.appendElement(a);
	
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("feature_list",3, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // feature_list ::= attribute 
            {
              Features RESULT =null;
		attr a = (attr)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		
		RESULT = new Features(curr_lineno()).appendElement(a);
	
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("feature_list",3, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // feature_list ::= 
            {
              Features RESULT =null;
		 RESULT = new Features(curr_lineno()); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("feature_list",3, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // class ::= CLASS TYPEID INHERITS TYPEID LBRACE feature_list RBRACE SEMI 
            {
              class_c RESULT =null;
		AbstractSymbol n = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-6)).value;
		AbstractSymbol p = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		Features f = (Features)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		 RESULT = new class_c(curr_lineno(), n, p, f, curr_filename()); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("class",2, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // class ::= CLASS TYPEID LBRACE feature_list RBRACE SEMI 
            {
              class_c RESULT =null;
		AbstractSymbol n = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		Features f = (Features)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		 RESULT = new class_c(curr_lineno(), n, 
		                   AbstractTable.idtable.addString("Object"), 
				   f, curr_filename()); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("class",2, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // class_list ::= class_list class 
            {
              Classes RESULT =null;
		Classes cl = (Classes)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		class_c c = (class_c)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = cl.appendElement(c); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("class_list",1, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // class_list ::= class 
            {
              Classes RESULT =null;
		class_c c = (class_c)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = (new Classes(curr_lineno())).appendElement(c); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("class_list",1, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		programc start_val = (programc)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		RESULT = start_val;
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$CoolParser$parser.done_parsing();
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= class_list 
            {
              programc RESULT =null;
		Classes cl = (Classes)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new programc(curr_lineno(), cl); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("program",0, RESULT);
            }
          return CUP$CoolParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

